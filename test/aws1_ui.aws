#!/bin/sh

prev=null

log=n

ahrsdev=/dev/ttyUL4
ahrscom=23

gps=n
gpscom=4
gpsdev=/dev/ttyUL5

ahrs=n
ahrsdev=/dev/ttyUL4
ahrscom=23

gffcom=0
gffdev=/dev/ttyUL3

apcom=0
apdev=/dev/ttyUL2

ais=n
aiscom=24
aisdev=/dev/ttyUL1

map=n
mapath=c:/cygwin/home/yhmtmt/share/aws1_map

dbg=no
rec=no
std=n
tlcc=n
alg=quad


if [ $# -lt 1 ]; then
    echo "Usage: aws1_ui.aws log log<#> [options]"
    exit
fi

arg_prev="null"
log_name="null"

for arg in $*
do
    if [ $arg_prev = "log" ]; then
	log_name=$arg
    else
	case $arg in
	    "log") log=y;;
	    "ahrs") ahrs=y;;
	    "ais") ais=y;;
	    "gps") gps=y;;
	    "log") log=y;;
	    "map") map=y;;
	    "rec") rec=y;;
	    "std") std=y;;
	    "dbg") dbg=y;;
	esac
    fi
    arg_prev=$arg
done

source ../common/path
source ./$log_name

channel state state
channel ais_obj ais_obj
channel wp wp
channel aws1_ctrl_stat aws1_ctrl_stat
channel aws1_ctrl_inst aws1_ctrl_ui
channel aws1_ctrl_inst aws1_ctrl_ap1
channel imgr img1
channel imgr img2
channel aws1_ap_inst ap_inst

#setting up waypoint manager
../common/setup_wp_manager.aws

CH_IMGL=img1
CH_IMGR=img2
FLIP_X=yes
FLIP_Y=no

#Stereo disparity calculator
if [ $std = y ]; then
    channel imgr img1c
    channel imgr img2c

    channel obst obst
    channel imgr disp
    channel imgr rimg1
    channel imgr rimg2
    
    #setting up lcc
    ../common/setup_lcc.aws $path_aws $camparl $camparr $alg $tlcc

    #setting up stereod
    ../common/setup_stereod.aws $camparl $camparr $campars
    
    if [ $dbg = y ]; then
	CH_IMGL=rimg1
	CH_IMGR=rimg2
    else
	CH_IMGL=img1c
	CH_IMGR=img2c
    fi
    FLIP_X=no
    FLIP_Y=yes
fi

#Object manager
../common/setup_obj_manager.aws

if [ $map = y ]; then
    channel map map

    filter map map -i -o
    fset map ch_map map
    fset map path $mapath
    fset map list list.txt

fi

../common/setup_aws1_ui.aws $path_data $CH_IMGL $CH_IMGR $FLIP_X $FLIP_Y $map $std $rec


if [ $log = n ]; then

    #Autopilot filter
    ../common/setup_ap.aws
    
    
    if [ $ahrs = y ]; then
	fset aws1_ui_test ahrs y
	
	filter ahrs ahrs -i -o
	fset ahrs ch_state state
	fset ahrs br 57600
	fset ahrs port $ahrscom
	fset ahrs dev $ahrsdev
	fset ahrs cmd ot
    fi
    
    filter aws1_nmea_sw aws1_nmea_sw -i -o
    fset aws1_nmea_sw state state
    fset aws1_nmea_sw verb no
    
    if [ $gps = y ]; then
	fset aws1_ui_test gps y
	channel nmea gps_in
	channel nmea gps_out
	
	filter nmea gps -i gps_in -o gps_out
	fset gps src COM
	fset gps bps 4800
	fset gps port $gpscom
	fset gps fnmea $gpsdev
	fset gps verb n
	
	fset aws1_nmea_sw gps_nmea_i gps_out
	fset aws1_nmea_sw gps_nmea_o gps_in
	fset aws1_nmea_sw gpsint 1
    fi

    if [ $ais = y ]; then
	channel nmea ais_in
	channel nmea ais_out
	
	filter nmea ais -i ais_in -o ais_out
	fset ais src COM
	fset ais bps 38400
	fset ais port $aiscom
	fset ais fnmea $aisdev
	fset ais verb n
	
	fset aws1_nmea_sw ais_obj ais_obj
	fset aws1_nmea_sw ais_nmea_i ais_out
	fset aws1_nmea_sw ais_nmea_o ais_in
	fset aws1_nmea_sw aisint 1
    fi

    go
else
    filter read_ch_log log -i -o img1 img2 state aws1_ctrl_ui aws1_ctrl_ap1 aws1_ctrl_stat ais_obj
    fset log path $path_log
    if [ $logtime = 0 ]; then
	echo "log <start time in sec>"
    else
	echo "replay from $logtime"
	online no
	go $logtime
    fi
fi

