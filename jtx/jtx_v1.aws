#!/bin/bash

log=n;
rep=n;
sim=n
arg_prev=n
lognum=001

for arg in $*
do
    case $arg in
	"log") sim=n
	       rep=n
	       log=y;;
	"rep") sim=n
	       rep=y
	       log=n;;
	"sim") sim=y
	       rep=n
	       log=n;;
    esac
    case $arg_prev in
	"rep")
	    lognum=$arg;;
    esac
    arg_prev=$arg    
done

path_script=../
. $path_script/common/path

engstate=$engstate
channel state state
channel estate estate
channel engstate $engstate

channel map map
channel ais_obj ais_obj
channel imgr disp
channel obst obst
channel wp wp
channel aws1_ctrl_stat aws1_ctrl_stat
channel aws1_ctrl_inst aws1_ctrl_ui
channel aws1_ctrl_inst aws1_ctrl_ap1
channel imgr img1
channel imgr img2
channel imgr img1c
channel imgr img2c
channel imgr rimg1
channel imgr rimg2
channel aws1_ap_inst ap_inst
channel env env

#n2k 
$path_script/common/n2k.aws engstate=$engstate

#state estimator
filter stest stest -i -o
fset stest ch_state state
fset stest ch_estate estate
fset stest qxx 1.0 qxy 0.0
fset stest qyx 0.0 qyy 1.0

fset stest quu 1.0 quv 0.0
fset stest qvu 0.0 qvv 1.0

fset stest rxx 1.0 rxy 0.0
fset stest ryx 0.0 ryy 1.0

fset stest ruu 1.0 ruv 0.0
fset stest rvu 0.0 rvv 1.0

fset stest acv no
fset stest log no
fset stest verb no

# User interface filter
rec=no
map=y
std=n
FLIP_X=no
FLIP_Y=yes
CH_IMGL=img1c
CH_IMGR=img2c

LOG="state env aws1_ctrl_ui aws1_ctrl_ap1 aws1_ctrl_stat ais_obj"

$path_script/common/setup_aws1_ui.aws $path_data $CH_IMGL $CH_IMGR $FLIP_X $FLIP_Y $map $std $rec 

#Autopilot filter
$path_script/common/setup_ap.aws

#Object manager
$path_script/common/setup_obj_manager.aws

#Waypoint manager
$path_script/common/setup_wp_manager.aws $path_data

filter map map -i -o
fset map ch_map map
fset map path $path_map
fset map max_num_nodes 100
fset map max_total_size_layer_data 100000000
fset map max_size_coast_line 1000000

if [ $rep = y ]; then
    . jtklog/log$lognum
    filter read_ch_log log -i -o $LOG
    fset log path $path_log
    echo replaying $path_log from t=$log_time
    go $log_time
else
    if [ $sim = y ]; then
	# test filter
	filter aws1_ui_test aws1_ui_test -i -o
	fset aws1_ui_test ch_state state
	fset aws1_ui_test ch_ais_obj ais_obj
	fset aws1_ui_test ch_ctrl_ui aws1_ctrl_ui
	fset aws1_ui_test ch_ctrl_ap1 aws1_ctrl_ap1
	#fset aws1_ui_test ch_ctrl_ap2
	fset aws1_ui_test ch_ctrl_stat aws1_ctrl_stat
	
	fset aws1_ui_test meng_max_rmc 21 meng_nuf_rmc 91 meng_nut_rmc 107 meng_nub_rmc 124 meng_min_rmc 151
	fset aws1_ui_test seng_max_rmc 24 seng_nuf_rmc 91 seng_nut_rmc 107 seng_nub_rmc 124 seng_min_rmc 151
	fset aws1_ui_test rud_max_rmc 220 rud_nut_rmc 111 rud_min_rmc 0
	fset aws1_ui_test rud_sta_max 15 rud_sta_nut 90 rud_sta_min 172
	fset aws1_ui_test meng_max 228 meng_nuf 151 meng_nut 129 meng_nub 104 meng_min 78
	fset aws1_ui_test seng_max 226 seng_nuf 153 seng_nut 130 seng_nub 103 seng_min 78
	fset aws1_ui_test rud_max 5 rud_nut 127 rud_min 250
	fset aws1_ui_test rud_sta_out_max 243 rud_sta_out_nut 143 rud_sta_out_min 39
	fset aws1_ui_test awsrud 127 awsmeng 127 awsseng 127
	
	#state setting
	fset aws1_ui_test lat 35.55061306 lon 140.11532166 alt 0 cog 180 sog 5 yaw 135 depth 8 	
    else	
	#Channel sharing
	filter ch_share share -i aws1_ctrl_ui aws1_ctrl_ap1 -o state env aws1_ctrl_stat ais_obj
	fset share port_dst 20100
	fset share host_dst $ip_zed
	
	#Time synch (client)
	filter tsync tsync -i -o
	fset tsync host_svr $ip_zed
	fset tsync port_svr 20200
    fi
    
    if [ $log = y ]; then
	filter write_ch_log log -i $LOG -o 
	fset log path $path_log
    fi
    go
fi
